# -*- coding: utf-8 -*-
"""Luis_unit_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gPXN3E4RyIu0Hxc8Mlc5mAfDhKYxsCJG
"""

import unittest
from unittest.mock import patch
from io import StringIO
import json
import random
import sys
import os

# Import the classes and functions you want to test

# Define a class for your unit tests
class TestMartialArtsGame(unittest.TestCase):

    # Test the add_player function
    @patch('builtins.input', side_effect=['Test Player', 'Muay Tai', 'spin'])
    def test_add_player(self, mock_input):
        with patch('sys.stdout', new=StringIO()) as fake_out:
            # Call the add_player function
            add_player()
            # Check if the player was added to the player list
            self.assertEqual(len(player_list), 1)
            # Check if the player's name and inventory were set correctly
            self.assertEqual(player_list[0].name, 'Test Player')
            self.assertEqual(len(player_list[0].inventory), 4)
            # Check if the output message was printed
            self.assertIn('MuayTai', fake_out.getvalue())

    # Test the combat function
    def test_combat(self):
        # Create two players for testing
        player1 = MuayTai()
        player2 = Karate()
        player1.name = 'Player 1'
        player2.name = 'Player 2'
        # Set player 2's health to 0 to simulate defeat
        player2.health = 0

        # Redirect stdout to capture print statements
        with patch('sys.stdout', new=StringIO()) as fake_out:
            # Call the combat function
            combat(player1, player2)
            # Check if the correct victory message was printed
            self.assertIn('Player 1 is the victor!', fake_out.getvalue())

    # Test the com_sim function
    @patch('builtins.input', side_effect=['start', 'Test Player 1', 'Muay Tai', 'Test Player 2', 'Karate'])
    def test_com_sim(self, mock_input):
        # Redirect stdout to capture print statements
        with patch('sys.stdout', new=StringIO()) as fake_out:
            # Call the main function
            main()
            # Check if the correct victory message was printed
            self.assertIn('Player 1 is the victor!', fake_out.getvalue())

# Run the unit tests if this script is executed directly
if __name__ == '__main__':
    unittest.main()